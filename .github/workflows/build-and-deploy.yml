name: Build and Deploy

on:
  push:
    branches: main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: beforegoing-server
  S3_BUCKET_NAME: codedeploy-artifact-server-beforegoingdapne2
  APPLICATION_NAME: codedeploy-app-beforegoingdapne2
  DEPLOYMENT_GROUP_NAME: codedeploy-group-beforegoingdapne2

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run tests
      run: ./gradlew test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build application
      run: ./gradlew build -x test

    - name: Create .env file
      env:
        ENV_PATH: .env
      run: |
        touch $ENV_PATH
        echo SPRING_DATASOURCE_ENDPOINT=${{ secrets.SPRING_DATASOURCE_ENDPOINT }} >> $ENV_PATH
        echo SPRING_DATASOURCE_PORT=${{ secrets.SPRING_DATASOURCE_PORT }} >> $ENV_PATH
        echo SPRING_DATASOURCE_DATABASE_NAME=${{ secrets.SPRING_DATASOURCE_DATABASE_NAME }} >> $ENV_PATH
        echo SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} >> $ENV_PATH
        echo SECRETS_MANAGER=${{ secrets.SECRETS_MANAGER }} >> $ENV_PATH
        echo SPRING_REDIS_HOST=${{ secrets.SPRING_REDIS_HOST }} >> $ENV_PATH
        echo SPRING_REDIS_PORT=${{ secrets.SPRING_REDIS_PORT }} >> $ENV_PATH
        echo OAUTH_KAKAO_APP_KEY=${{ secrets.OAUTH_KAKAO_APP_KEY }} >> $ENV_PATH
        echo ISSUER_NAME=${{ secrets.ISSUER_NAME }} >> $ENV_PATH
        echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> $ENV_PATH
        echo ACCESS_TOKEN_EXPIRE_TIME=${{ secrets.ACCESS_TOKEN_EXPIRE_TIME }} >> $ENV_PATH
        echo REFRESH_TOKEN_EXPIRE_TIME=${{ secrets.REFRESH_TOKEN_EXPIRE_TIME }} >> $ENV_PATH
        echo SENTRY_DSN=${{ secrets.SENTRY_DSN }} >> $ENV_PATH

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Create deployment package
      run: |
        zip -r deployment-${{ github.sha }}.zip scripts/ appspec.yml .env

    - name: Upload deployment package to S3
      run: |
        aws s3 cp deployment-${{ github.sha }}.zip s3://$S3_BUCKET_NAME/deployment-${{ github.sha }}.zip

    - name: Create CodeDeploy deployment
      run: |
        aws deploy create-deployment \
          --application-name $APPLICATION_NAME \
          --deployment-group-name $DEPLOYMENT_GROUP_NAME \
          --description "Deployment from GitHub Actions - commit ${{ github.sha }}" \
          --s3-location bucket=$S3_BUCKET_NAME,key=deployment-${{ github.sha }}.zip,bundleType=zip
