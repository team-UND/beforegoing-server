name: Deployment to Staging Server

on:
  push:
    branches: stg

env:
  AWS_IAM_ROLE_TO_ASSUME: ${{ secrets.STG_AWS_IAM_ROLE_TO_ASSUME }}
  AWS_REGION: ${{ vars.STG_AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.STG_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.STG_ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.STG_ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.STG_ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ vars.STG_CONTAINER_NAME }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-image.outputs.image }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*', '**/*.gradle.kts', '**/gradle-wrapper.properties') }}

      - name: Build app
        run: ./gradlew build

      - name: Set SHORT_SHA
        id: set-sha
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SHORT_SHA: ${{ steps.set-sha.outputs.short_sha }}
        run: |
          IMAGE_TAG=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$SHORT_SHA
          docker build --target stg -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backup Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-def-backup.json

      - name: Render new Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def-backup.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build.outputs.image_tag }}

      - name: Deploy to ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 8

      - name: Notify Success to Discord
        if: success()
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: |
            ✅ **Deployment Succeeded**
            - Service: `${{ env.ECS_SERVICE }}`
            - Image: `${{ needs.build.outputs.short_sha }}`
            - Cluster: `${{ env.ECS_CLUSTER }}`
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "⚠️ Deployment failed. Rolling back..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $(jq -r '.taskDefinition.taskDefinitionArn' task-def-backup.json)

      - name: Notify Failure to Discord
        if: failure()
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: |
            ❌ **Deployment Failed**
            - Service: `${{ env.ECS_SERVICE }}`
            - Image: `${{ needs.build.outputs.short_sha }}`
            - Action: Rolled back to previous task definition.
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
