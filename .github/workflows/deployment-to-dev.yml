name: Deployment to Development Server

on:
  push:
    branches: develop

env:
  AWS_IAM_ROLE_TO_ASSUME: ${{ secrets.DEV_AWS_IAM_ROLE_TO_ASSUME }}
  AWS_REGION: ${{ vars.DEV_AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.DEV_ECR_REPOSITORY }}
  APP_RUNNER_SERVICE_ARN: ${{ vars.DEV_APP_RUNNER_SERVICE_ARN }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build application
      run: ./gradlew build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_IAM_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to AWS App Runner
      id: deploy
      run: |
        STATUS=$(aws apprunner describe-service --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }} --query 'Service.Status' --output text)
        if [ "$STATUS" == "PAUSED" ]; then
          echo "Service is PAUSED. Resuming service..."
          aws apprunner resume-service --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }}
          echo "Waiting for service to become active..."
          aws apprunner wait service-running --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }}
          echo "Service is now RUNNING."
        fi

        echo "Starting a new deployment..."
        aws apprunner start-deployment --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }}
        echo "Waiting for the deployment to complete..."
        aws apprunner wait service-stable --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }} --region ${{ env.AWS_REGION }}

    - name: Send Success Message
      if: success()
      uses: Ilshidur/action-discord@0.3.2
      with:
        args: "A new version (`${{ steps.build-image.outputs.tag }}`) has been deployed to Development Server ðŸš€"
      env:
        DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        DISCORD_EMBEDS: |
          [
            {
              "author": {
                "name": "${{ github.actor }}"
              },
              "title": "Deployment Succeeded",
              "description": "Branch: `${{ github.ref_name }}`\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": 10478271
            }
          ]

    - name: Send Failure Message
      if: failure()
      uses: Ilshidur/action-discord@0.3.2
      with:
        args: "Deployment to Development Server failed ðŸ˜¢"
      env:
        DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        DISCORD_EMBEDS: |
          [
            {
              "author": {
                "name": "${{ github.actor }}"
              },
              "title": "Deployment Failed",
              "description": "Branch: `${{ github.ref_name }}`\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": 13458524
            }
          ]
