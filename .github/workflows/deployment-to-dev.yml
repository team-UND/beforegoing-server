name: Deployment to Development Server

on:
  push:
    branches: develop

env:
  AWS_IAM_ROLE_TO_ASSUME: ${{ secrets.DEV_AWS_IAM_ROLE_TO_ASSUME }}
  AWS_REGION: ${{ vars.DEV_AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.DEV_ECR_REPOSITORY }}
  APP_RUNNER_SERVICE_ARN: ${{ vars.DEV_APP_RUNNER_SERVICE_ARN }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build application
      run: chmod +x gradlew && ./gradlew build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_IAM_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set SHORT_SHA
      id: set-sha
      run: |
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        SHORT_SHA: ${{ steps.set-sha.outputs.short_sha }}
      run: |
        IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$SHORT_SHA
        docker build --target dev -t $IMAGE_URI -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
        docker push $IMAGE_URI
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT
        echo "tag=$SHORT_SHA" >> $GITHUB_OUTPUT

    - name: Deploy to AWS App Runner
      id: deploy
      env:
        SERVICE_ARN: ${{ env.APP_RUNNER_SERVICE_ARN }}
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        echo "Updating App Runner service to use image: $IMAGE_URI"
        aws apprunner update-service \
          --service-arn $SERVICE_ARN \
          --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR}"

        echo "Waiting for service update to complete..."
        MAX_RETRIES=60
        RETRIES=0
        while true; do
          STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.Status' --output text)
          echo "[$((RETRIES + 1))/$MAX_RETRIES] Deploying... current status: $STATUS"

          [ "$STATUS" = "RUNNING" ] && break
          [ "$STATUS" = "CREATE_FAILED" ] && { echo "Deployment failed!"; exit 1; }

          RETRIES=$((RETRIES+1))
          [ $RETRIES -ge $MAX_RETRIES ] && { echo "Timeout while waiting for service to be RUNNING."; exit 1; }

          sleep 10
        done

        echo "Deployment complete! Service is now in RUNNING status."

    - name: Send Success Message
      if: success()
      uses: Ilshidur/action-discord@0.3.2
      with:
        args: "A new version (`${{ steps.build-image.outputs.tag }}`) has been deployed to Development Server ðŸš€"
      env:
        DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        DISCORD_EMBEDS: |
          [
            {
              "author": {
                "name": "${{ github.actor }}"
              },
              "title": "Deployment Succeeded",
              "description": "Branch: `${{ github.ref_name }}`\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": 10478271
            }
          ]

    - name: Send Failure Message
      if: failure()
      uses: Ilshidur/action-discord@0.3.2
      with:
        args: "Deployment to Development Server failed ðŸ˜¢"
      env:
        DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        DISCORD_EMBEDS: |
          [
            {
              "author": {
                "name": "${{ github.actor }}"
              },
              "title": "Deployment Failed",
              "description": "Branch: `${{ github.ref_name }}`\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": 13458524
            }
          ]
