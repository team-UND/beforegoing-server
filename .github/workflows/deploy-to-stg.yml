name: Deploy to Staging Server

on:
  push:
    branches: [stg]

env:
  AWS_IAM_ROLE_TO_ASSUME: ${{ secrets.STG_AWS_IAM_ROLE_TO_ASSUME }}
  AWS_REGION: ${{ vars.STG_AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.STG_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.STG_ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.STG_ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.STG_ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ vars.STG_CONTAINER_NAME }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-image.outputs.image }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}

    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build application
        run: chmod +x gradlew && ./gradlew build

      - name: Set SHORT_SHA
        id: set-sha
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SHORT_SHA: ${{ steps.set-sha.outputs.short_sha }}
        run: |
          IMAGE_TAG=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$SHORT_SHA
          echo "Building and pushing image for staging: $IMAGE_TAG"
          docker build --target stg -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log Current Service State
        run: |
          echo "Checking current service state before deployment..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].deployments' --output table

      - name: Backup Current Task Definition
        run: |
          echo "Backing up current task definition to task-def-backup.json"
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-def-backup.json
          if [ ! -f task-def-backup.json ]; then
            echo "::error::Failed to backup task definition."
            exit 1
          fi
          echo "Backup successful."

      - name: Render New Task Definition with New Image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def-backup.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build.outputs.image_tag }}

      - name: Deploy New Task Definition to ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 15

      - name: Check for Rollback
        id: check-rollback
        run: |
          ORIGINAL_TASK_DEF_ARN=$(jq -r '.taskDefinitionArn' task-def-backup.json)
          FINAL_TASK_DEF_ARN="${{ steps.deploy.outputs.task-definition-arn }}"
          echo "Original Task Definition ARN: $ORIGINAL_TASK_DEF_ARN"
          echo "Final Task Definition ARN: $FINAL_TASK_DEF_ARN"
          if [ "$ORIGINAL_TASK_DEF_ARN" == "$FINAL_TASK_DEF_ARN" ]; then
            echo "rollback_occurred=true" >> $GITHUB_OUTPUT
          else
            echo "rollback_occurred=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify Success to Discord
        if: success() && steps.check-rollback.outputs.rollback_occurred == 'false'
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "A new version (`${{ needs.build.outputs.short_sha }}`) has been deployed to Staging Server ðŸš€"
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: |
            [
              {
                "author": { "name": "${{ github.actor }}" },
                "title": "Deployment Succeeded",
                "description": "Branch: `${{ github.ref_name }}`\nWorkflow: [View on GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "color": 10478271,
                "fields": [
                  { "name": "Cluster", "value": "`${{ env.ECS_CLUSTER }}`", "inline": true },
                  { "name": "Service", "value": "`${{ env.ECS_SERVICE }}`", "inline": true },
                  { "name": "Image", "value": "`${{ needs.build.outputs.short_sha }}`", "inline": true }
                ]
              }
            ]

      - name: Notify Rollback to Discord
        if: steps.check-rollback.outputs.rollback_occurred == 'true'
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "Deployment to Staging Server failed and was rolled back ðŸ˜¢"
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: |
            [
              {
                "author": { "name": "${{ github.actor }}" },
                "title": "Deployment Failed & Rolled Back",
                "description": "Branch: `${{ github.ref_name }}`\nWorkflow: [View on GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n**Action**: The deployment failed and the service was automatically rolled back to the previous stable task definition.",
                "color": 13458524,
                "fields": [
                  { "name": "Service", "value": "`${{ env.ECS_SERVICE }}`", "inline": true },
                  { "name": "Image Attempted", "value": "`${{ needs.build.outputs.short_sha }}`", "inline": true }
                ]
              }
            ]

      - name: Fail job on rollback
        if: steps.check-rollback.outputs.rollback_occurred == 'true'
        run: |
          echo "::error::Deployment failed and was rolled back by ECS. Failing the workflow."
          exit 1

      - name: Notify on Other Failures
        if: failure() && steps.check-rollback.outputs.rollback_occurred != 'true'
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "Deployment to Staging Server failed for an unexpected reason ðŸš¨"
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: |
            [
              {
                "author": { "name": "${{ github.actor }}" },
                "title": "Deployment Failed",
                "description": "Branch: `${{ github.ref_name }}`\nWorkflow: [View on GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n**Action**: The workflow failed unexpectedly. Manual investigation is required.",
                "color": 13458524,
                "fields": [
                  { "name": "Service", "value": "`${{ env.ECS_SERVICE }}`", "inline": true },
                  { "name": "Image Attempted", "value": "`${{ needs.build.outputs.short_sha }}`", "inline": true }
                ]
              }
            ]
